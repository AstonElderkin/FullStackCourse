CSS - Cascading Style Sheets Notes

External - seperate .css file - use link tag or @import.
Can be used on numerous .html files.
Multiple .css files can be used on 1 page (big projects).
<head>
	<link rel="stylesheet" href="css/styles.css">
</head>
<head>
	<style> @import url('/styles/layout.css'); </style>
</head>

Inline - <p style="color:red;">red paragraph</p> - Use for single change not reusable.

Internal - Best for short blocks of css unique to that page
<head>
	<style>
		h1 {
			color:green;
		}
		h2 {
			color:blue;
		}
	</style>
</head>

Retina display - trademark by apple - high pixel density screens, other manufacturers have their own versions.
Measured in pixels per inch (PPI), or dots per inch (DPI).
Retina displays have double the number of PPI/DPI
To support retina displays use an image 2x the size so 600px instead of 300px for that area space
i.e. webspace is 300px so use 600px image

Project images - 
Thumbnails - 600px width
Background images - 1400px - 2000px width

<link rel="stylesheet" href="foldername/filename.extensionname">
<img src="foldername/filename.extensionname">

Absolute paths - resources located on a server - linking to pages outide your site.
<a href="http://website.com/blog"></a>

Do not hotlink - image link to image not on your website i.e. <img src="http://notmywebsite.com/images/photo.jpg">

All resources should be in same folder structure for use except for placeholders.

CSS Syntax:
*Whole section = declaration block
img {
	width: 300px;
}
img = selector
width: 300px; = declaration
width = property
300px = value

Longhand syntax:
padding-top:10px;
padding-right: 5px;
padding-bottom:10px;
padding-left: 5px;

Shorthand syntax:
padding: 10px 5px;

CSS Comments - /*Write your comment in here. */

Formatting and whitespace:
This works:
body{background:lightblue;font-size:12px;} h1{color:blue;}
But do this:
body {
	background:lightblue;
	font-size:12px;
}
h1 {
	color:blue;
}

<length> data type is used to specify sizing with 2 types of units:
absolute - fixed unit, always same size - not affected by values in related elements - px, cm, mm, pt
relative - relational, not fixed - dependent on values declared in parent and ancestor elements - em, rem, vw, vh

CSS Function values - Always includes function name & ()
transform: rotate();

transform: rotate(90deg);

dont need to declare initial default values - browser does this if no css applied.

Basic color keywords include:
red, blue, green, black

extended color keywords include:
mediumseagreen, oldlace, alicblue, blanchedalmond

see colours @ colours.neilorangepeel.com

RGB - values define colours according to its red, green & blue components

Hexadecimal - prefixed with # & followed by 6 characters (0-9 & A-F) #rrggbb
Can be shorthanded if pairs are the same.
#000000 = #000 = black
#ffffff = #fff= white
#ffa500 = orange
#ffc0cb = pink
#808080 = grey

rgb() - 3 comma-seperated numbers between 0-255 or 0%-100%
Spaces are not required but help readability
More colour options than keywords with RGB Values
rgb(0, 0, 0) = black
rgb(0%, 0%, 0%)
rgb(255, 255, 255) = black
rgb(100%, 100%, 100%)

rgba() - to change opacity
rgba(0, 0, 0)
rgba(0, 0, 0, 0) 0% opacity
rgba(0, 0, 0, 0.5) 50%
rgba(0, 0, 0, 1) 100%

hsl() & hsla() - defines colour value by its hue, saturation & lightness -  also includes option opacity (alpha component)
hue = an angle (0-360) - can be with or without degree unit:
hsl(270, 60%, 70%)
hsl(270deg, 60%, 70%)
saturation = percentage - 100% = full saturation, 0% = grey
lightness = percentage - 100% = white, 0% = black, 50% = normal
The alpha channel - decimal or percentage
hsl(270, 60%, 70%, 0.7)
hsl(270, 60%, 70%, 70%)

hsl(270, 60%, 70%)
hsla(270, 60%, 70%, 0.7)

Type selectors - most common - matches html element without <>
h1 {
	color: blue;
}
h2 {
	color: pink;
}

Universal selector - matches to all elements of any type
* {
	color: red;
}

Class selector - Add the class attribute to the HTML element - Reusable
Class = :
.fancy {
	font-style: italic;
}
.intro {
	font-size: 10px;
}

<p class="fancy">Fancy Paragraph.</p>

Can use multiple classes in an element - seperate with space 
<p class="fancy intro">Fancy intro paragraph.</p>

ID Selector - Add the ID attribute to the HTML element - Not reusable, can only be used 1 time per page
#container {
	text-aligh: center;
}

<div id="container">
	<p>Paragraph in a header.</p>
</div>

IDs can also be used for in-page linking
<a href="#example">Links to a spot on the page</a>
<section id="example">Link goes here</section>

#example {
	...
}

Naming conventions:
Use meaningfu;e & description names
.error-message {...} = good
.red-text {...} = bad

Use easily understood abbreviations
.button {...} = good
.btn {...} = good
.b {...} = bad

dont use spaces, use a - or _
class="class-name"
id="id_name"

Nested elements & the Document Object Model (DOM)
DOM - represents the relationships between HTML elements.

<section>
	<h1>Heading</h1>
	<p>Paragraph.</p>
	<ul>
		<li>List item</li>
		<li>List item</li>
		<li>List item</li>
	</ul>
</section>

Section = parent of h1, p & ul
h1, p & ul = siblings
li = children of ul
li = descendant of section

Descendant selectors - selects only elements nested within another specified element e.g.
Can be done with class & id
.container p {
	...
}

section p {
	...
}

<section>
	<p>This is affected.</p>
</section>
<p>This is not affected.</p>

section p a {
	...
}

<section>
	<p>There's a <ahref="#">Link. This link is affected.</a> inside this paragraph</p>
	<p>This is not affected.</p>
	<a href="#>Link. This link is not affected.</a>
</section>
<a href="#">Link</a>

ctrl + / removes comment marks for that line in ide.

Grouping selectors
h1, h2 {
	...
}
h1, h2, .class, #id {
	...
}

when using nested expand the grouping fully so:
section h1, section h2 {
	...
}
because:
section h1, h2 {
	...
}
=
section h1 {}
h2 {}

Inheritance - CSS styles can be inherited from ancestor to descendant elements.
body {
	color: #222;
}
Anything in body such as h1 therefor have color: #222;

Some properties cant be inheritied such as background-color

Specificity determines how browser decide which CSS rule takes precedence.
p {
	color: red;
}
.example {
	color: blue;
}
<p class="example">Red or blue?</p>

Order:
1.Universal (*)
2.Type (p)
3.Class (.example)
4.Id (#example) - Highest priority

Cascade - In Cascading Stle Sheets (CSS) refer to how style rules are applied based on specificity & source order.
Style sheets are red top to bottom. Declaration loaded last will take precedence if numerous styles are applied to element.
Also applies to declarations in same block.
p {
	font-size: 12px;
}
/* This will take precedence */
p {
	font-size: 16px;
}

p {
	color: black;
	padding: 20px;
	font-size: 12px;
	font-size: 16px; /*This wille take precedence */
}

The !important keyword overides source order & specificity.
p {
	font-size: 12px!important; /*This style will take precedence */
}
.example {
	font-size: 16px;
}

Psuedo-class selector - combined with other selector using :
Needs user input.
<a>no href</a>
<a href="#">:link</a> 
<a href="#">:visited</a> 
<a href="#">:hover</a>
<a href="#">:active</a>
<a href="##">:focus</a>

body {
	font-size: 20px;
}
a {
	color: red;
}
a:link {
	color:green;
}
a:visited {
	color: grey;
}
a:focus {
	outline: 1px solid black;
}
a:hover {
	background: grey;
}
a:active {
	color:white;
}

If no link then will be red,
If has a link but no intyeraction will be green
when visited will be grey
when focus (using keyboard tab) will have an outline
when hover with mouse background is grey
when active (during click/interaction) colour is white

Block elements are the same height as their content & same width as their container.
Always start on a new line.

The display property - can be used to change the default behaviour of inline & block-level elements.

<div>Block</div>
<div>Block</div>
<span>Inline</span>
<span>Inline</span>
Output - :
Block
Block
Inline Inline

Adding dsiplay to inline elements can make them look like blocks.
& vice versa for blocks.
display: block;
display: inline;

display: inline-block; This will use the height & width like a block but put them side by side like an inline element.






