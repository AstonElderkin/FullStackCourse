CSS - Cascading Style Sheets Notes

External - seperate .css file - use link tag or @import.
Can be used on numerous .html files.
Multiple .css files can be used on 1 page (big projects).
<head>
	<link rel="stylesheet" href="css/styles.css">
</head>
<head>
	<style> @import url('/styles/layout.css'); </style>
</head>

Inline - <p style="color:red;">red paragraph</p> - Use for single change not reusable.

Internal - Best for short blocks of css unique to that page
<head>
	<style>
		h1 {
			color:green;
		}
		h2 {
			color:blue;
		}
	</style>
</head>

Retina display - trademark by apple - high pixel density screens, other manufacturers have their own versions.
Measured in pixels per inch (PPI), or dots per inch (DPI).
Retina displays have double the number of PPI/DPI
To support retina displays use an image 2x the size so 600px instead of 300px for that area space
i.e. webspace is 300px so use 600px image

Project images - 
Thumbnails - 600px width
Background images - 1400px - 2000px width

<link rel="stylesheet" href="foldername/filename.extensionname">
<img src="foldername/filename.extensionname">

Absolute paths - resources located on a server - linking to pages outide your site.
<a href="http://website.com/blog"></a>

Do not hotlink - image link to image not on your website i.e. <img src="http://notmywebsite.com/images/photo.jpg">

All resources should be in same folder structure for use except for placeholders.

CSS Syntax:
*Whole section = declaration block
img {
	width: 300px;
}
img = selector
width: 300px; = declaration
width = property
300px = value

Longhand syntax:
padding-top:10px;
padding-right: 5px;
padding-bottom:10px;
padding-left: 5px;

Shorthand syntax:
padding: 10px 5px;

CSS Comments - /*Write your comment in here. */

Formatting and whitespace:
This works:
body{background:lightblue;font-size:12px;} h1{color:blue;}
But do this:
body {
	background:lightblue;
	font-size:12px;
}
h1 {
	color:blue;
}

<length> data type is used to specify sizing with 2 types of units:
absolute - fixed unit, always same size - not affected by values in related elements - px, cm, mm, pt
relative - relational, not fixed - dependent on values declared in parent and ancestor elements - em, rem, vw, vh

CSS Function values - Always includes function name & ()
transform: rotate();

transform: rotate(90deg);

dont need to declare initial default values - browser does this if no css applied.

Basic color keywords include:
red, blue, green, black

extended color keywords include:
mediumseagreen, oldlace, alicblue, blanchedalmond

see colours @ colours.neilorangepeel.com

RGB - values define colours according to its red, green & blue components

Hexadecimal - prefixed with # & followed by 6 characters (0-9 & A-F) #rrggbb
Can be shorthanded if pairs are the same.
#000000 = #000 = black
#ffffff = #fff= white
#ffa500 = orange
#ffc0cb = pink
#808080 = grey

rgb() - 3 comma-seperated numbers between 0-255 or 0%-100%
Spaces are not required but help readability
More colour options than keywords with RGB Values
rgb(0, 0, 0) = black
rgb(0%, 0%, 0%)
rgb(255, 255, 255) = black
rgb(100%, 100%, 100%)

rgba() - to change opacity
rgba(0, 0, 0)
rgba(0, 0, 0, 0) 0% opacity
rgba(0, 0, 0, 0.5) 50%
rgba(0, 0, 0, 1) 100%

hsl() & hsla() - defines colour value by its hue, saturation & lightness -  also includes option opacity (alpha component)
hue = an angle (0-360) - can be with or without degree unit:
hsl(270, 60%, 70%)
hsl(270deg, 60%, 70%)
saturation = percentage - 100% = full saturation, 0% = grey
lightness = percentage - 100% = white, 0% = black, 50% = normal
The alpha channel - decimal or percentage
hsl(270, 60%, 70%, 0.7)
hsl(270, 60%, 70%, 70%)

hsl(270, 60%, 70%)
hsla(270, 60%, 70%, 0.7)

Type selectors - most common - matches html element without <>
h1 {
	color: blue;
}
h2 {
	color: pink;
}

Universal selector - matches to all elements of any type
* {
	color: red;
}

Class selector - Add the class attribute to the HTML element - Reusable
Class = :
.fancy {
	font-style: italic;
}
.intro {
	font-size: 10px;
}

<p class="fancy">Fancy Paragraph.</p>

Can use multiple classes in an element - seperate with space 
<p class="fancy intro">Fancy intro paragraph.</p>

ID Selector - Add the ID attribute to the HTML element - Not reusable, can only be used 1 time per page
#container {
	text-aligh: center;
}

<div id="container">
	<p>Paragraph in a header.</p>
</div>

IDs can also be used for in-page linking
<a href="#example">Links to a spot on the page</a>
<section id="example">Link goes here</section>

#example {
	...
}

Naming conventions:
Use meaningfu;e & description names
.error-message {...} = good
.red-text {...} = bad

Use easily understood abbreviations
.button {...} = good
.btn {...} = good
.b {...} = bad

dont use spaces, use a - or _
class="class-name"
id="id_name"

Nested elements & the Document Object Model (DOM)
DOM - represents the relationships between HTML elements.

<section>
	<h1>Heading</h1>
	<p>Paragraph.</p>
	<ul>
		<li>List item</li>
		<li>List item</li>
		<li>List item</li>
	</ul>
</section>

Section = parent of h1, p & ul
h1, p & ul = siblings
li = children of ul
li = descendant of section

Descendant selectors - selects only elements nested within another specified element e.g.
Can be done with class & id
.container p {
	...
}

section p {
	...
}

<section>
	<p>This is affected.</p>
</section>
<p>This is not affected.</p>

section p a {
	...
}

<section>
	<p>There's a <ahref="#">Link. This link is affected.</a> inside this paragraph</p>
	<p>This is not affected.</p>
	<a href="#>Link. This link is not affected.</a>
</section>
<a href="#">Link</a>

ctrl + / removes comment marks for that line in ide.

Grouping selectors
h1, h2 {
	...
}
h1, h2, .class, #id {
	...
}

when using nested expand the grouping fully so:
section h1, section h2 {
	...
}
because:
section h1, h2 {
	...
}
=
section h1 {}
h2 {}

Inheritance - CSS styles can be inherited from ancestor to descendant elements.
body {
	color: #222;
}
Anything in body such as h1 therefor have color: #222;

Some properties cant be inheritied such as background-color

Specificity determines how browser decide which CSS rule takes precedence.
p {
	color: red;
}
.example {
	color: blue;
}
<p class="example">Red or blue?</p>

Order:
1.Universal (*)
2.Type (p)
3.Class (.example)
4.Id (#example) - Highest priority

Cascade - In Cascading Stle Sheets (CSS) refer to how style rules are applied based on specificity & source order.
Style sheets are red top to bottom. Declaration loaded last will take precedence if numerous styles are applied to element.
Also applies to declarations in same block.
p {
	font-size: 12px;
}
/* This will take precedence */
p {
	font-size: 16px;
}

p {
	color: black;
	padding: 20px;
	font-size: 12px;
	font-size: 16px; /*This wille take precedence */
}

The !important keyword overides source order & specificity.
p {
	font-size: 12px!important; /*This style will take precedence */
}
.example {
	font-size: 16px;
}

Psuedo-class selector - combined with other selector using :
Needs user input.
<a>no href</a>
<a href="#">:link</a> 
<a href="#">:visited</a> 
<a href="#">:hover</a>
<a href="#">:active</a>
<a href="##">:focus</a>

body {
	font-size: 20px;
}
a {
	color: red;
}
a:link {
	color:green;
}
a:visited {
	color: grey;
}
a:focus {
	outline: 1px solid black;
}
a:hover {
	background: grey;
}
a:active {
	color:white;
}

If no link then will be red,
If has a link but no intyeraction will be green
when visited will be grey
when focus (using keyboard tab) will have an outline
when hover with mouse background is grey
when active (during click/interaction) colour is white

Block elements are the same height as their content & same width as their container.
Always start on a new line.

The display property - can be used to change the default behaviour of inline & block-level elements.

<div>Block</div>
<div>Block</div>
<span>Inline</span>
<span>Inline</span>
Output - :
Block
Block
Inline Inline

Adding dsiplay to inline elements can make them look like blocks.
& vice versa for blocks.
display: block;
display: inline;

display: inline-block; This will use the height & width like a block but put them side by side like an inline element.

The box model
Margin -> Border -> Padding -> Content

Properties:
Width
Height
Padding - Space in element between border
Border - Between padding & margin
Margin - Space outside of element

use length & percentage
.container {
	width: 100px;
}
.inside-container {
	width: 50%; /* 500px */
}

Relative <length> unit
em = Represents inherited font-size of element
rem = represents the font-size of the root element

1vw = 1% of the width of the viewport
1vh = 1% of the height of the viewport
vmin: Equal to the smaller of vw & vh
vmax: Equal to the larger of vw & vh

The width & height properties change the size of the content box. Inline elements require the display property.
/* Block element */
div {
	width: 100px;
	height: 100px;
}
/* in-line element */
span {
	width: 100px;
	height: 100px;
	display: block;
	/* or 
	/* display: inline-block; */
}

Padding add/removes space inside of the element but around the content box.
/* longhand */
padding-top: 2px;
padding-right: 2px;
padding-bottom: 2px;
padding-left: 2px;

/* shorthand */
padding: 2px 2px 2px 2px; /* top right bottom left */

Shorthand can use 1-4 values
padding: 2px; /* Same on all sides */
padding: 2px 10px; /* top & bottom, right & left */
padding: 2px 10px 5px; /* top, right & left, bottom */
padding: 2px 10px 5px 2px; /*top, right, bottom, left */

You can also mix unit types
padding: 10px 2%; /* top & bottom, right & left */

All values must be positive for padding, setting to 0 removes the padding.

Margin adds/removes space around the element.
Can be used with negatives.
Can be used with auto

/* longhand */
margin-top: 2px;
margin-right: 2px;
margin-bottom: 2px;
margin-left: 2px;

/* shorthand */
margin: 2px 2px 2px 2px; /* top right bottom left */
margin: 2px 10px 5px; /* top, right & left, bottom */
margin: 2px 10px; /* top & bottom, right & left */
margin: 2px; /* same on all sides */

The border properrty displays a border between the margin & padding.
/* longhand */
border-width: 2px;
border-style: solid;
border-color: red;

/* shorthand */
border: 2px solid red; /* width, style, color */

border-width: 10px;
	thin;
	medium;
	thick;

border-color: blue;
	#000000;

border-style: none;
	hidden;
	dotted;
	dashed;
	solid;
	double;
	groove;
	ridge;
	inset;
	outset;

The top & bottom margin of elements can take up the same space - This is margin collapsing.
i.e. bottom of h1 & top of h2 take up same space.
Inline elements only have left-right margins.

By default, block elements stack on top of each other.
Use negative margin values to move elements outide of the stacking position - to overlap
e.g. margin: -20px 0 0 -20px;

Creating a content wrapper - Create a container for just the content.
<section class="work">
	<div class="content-wrap"><!-- new content wrap div -->
		<h2>Work Experience</h2>
		...
	</dic><!-- Close content-wrap div -->
</section>

.content-wrap {
	width: 950px;
	margin: 0 auto;
}
.work {
	background: blue;
}

Typography - arranging type for readability & to engage & communicate with the reader.
Typeface - Set of fonts designed with common characteristics, composed of glyphs.
Times New Roman- Commonly used for legal purposes.
Comic sans - Casual font.

Script - Handwriting - Small - elegant - wedding invitations - headlines - decorative details
Decorative - Ornamental - headings - decorative details
Monospace - Each character uses same amount of horizontal space - same width - displaying code
Serif - small decorative lines at top or bottom of character - traditional & formal
Sans-Serif - no small decorative lines at top or bottom of character - contempory & modern

To set the type face - font-family
body {
	font-family: Helvetica, Arial, sans-serif;
}

Generic font-family names:
serif (serif fonts)
sans-serif (sans-serif fonts)
cursive (script or decorative fonts)
fantasy (decorative fonts)
monospace (monospace fonts)

Web-safe fonts - are commonly pre-installed on the majority of computers/devices (e.g. Arial, Times New Roman)
Fonts may vary among OS.
cssfontstack.com

If using font-family & have a character thats not a letter or - then need to escape it:
p {
	font-family: Ahem!, sans-serif; /*not valid*/
	font-family: Ahem\!, sans-serif; /*escaped, valid*/
}
or 
p {
	font-family: Ahem!, sans-serif; /*not valid*/
	font-family: Ahem\!, sans-serif; /*escaped, valid*/
	font-family: "Ahem!", sans-serif; /*double quoted, valid*/
	font-family: 'Ahem!', sans-serif; /*single quoted, valid*/
}

font-family: "Gill Sans", sans-serif; /*valid & recommended */
font-family: Gill Sans, sans-serif; /*valid*/

font-weight:
	Light
	Regular
	Semi-Bold
	Bold
	Extra-Bold

font-weight: 100; /*lightest or thinnest*/
font-weight: 200;
...
font-weight: 800;
font-weight: 900; /*darkest or thickest*/

100 - Thin
200 - Extra Light (Ultra Light)
300 - Light
400 - Normal
500 - Medium
600 - Semi Bold (Demi Bold)
700 - Bold
800 - Extra Bold (Ultra Bold)
900 - Black (Heavy)

keywords:
normal = 400 - also default for body text.
bold = 700 - also the default for headings.

lighter & bolder are relative to the inherited font-weight.

font-style - Used to add or remove an italic style. There are 3 values: 
italic - cursive & sloped
oblique - sloped
normal.
p {
	font-style: italic; /*Add italic style*/
em {
	font-style: normal; /*removes italic style*/
}

Web fonts with @font-face
Download font files.
Included in your project files just like other files (i.e. images).
Declare & link to font files using @font-face in css. 

@font-face {
	font-family: "My font";
	src: url(my-font.woff); /*relative path*/ src: url(../fonts/museo-sans.ttf);
	src: url(http://example.com/fonts/my-font.woff);/*absolute path*/
}

url() :
/*valid*/
src: url(my-font.woff);
src: url("my-font.woff");
src: url('my-font.woff');
src: url("my font.woff");
src: url(my\font.woff);

/*not valid */
src: url(my font.woff);

fontsquirrel.com - generate font type files.

fonts.google.com

font-size: px, em, rem
Relative values are calculated based on the nearest ancestor element.
Absolute values are fixed & not affected by ancestor elements.

font-size: px - absolute - great for accuracy - use whole numbers - Browser default = 16px.
font-size: em - relative - whole numbers or decimal - 1em = inheritied font size, if parent = 16px then 2em = 32px.
font-size: rem - relative - only relative to the root element (<html>) - not affected by parent or ancestor elements.

font shorthand property

font-style
font-size
font-weight
font-family
font-variant
line-height

/* shorthand - Must include values for font-size & font-family - others are optional*/
font: italic small-caps bold 24px/1.5 Helvetica, sans-serif;

/*longhand */
font-style: italic;
font-variant: small-caps;
font-weight: bold;
font-size: 24px;
line-height: 1.5;
font-family: Helvetica, sans-serif;

text-decoration: none; /* removes underline */

/* shorthand */
text-decoration: underline red solid;

/*longhand */
text-decoration-line: underline;
text-decoration-color: red;
text-decoration-style: solid;

text-align can be used to align content within a block element - can add to the HTML element or its parent element

line-height sets the height of the space between 2 lines of text - (px, %, ems, rems, or unitless)

float is mostly used for old websites -  but can be used to style specific content such as image wraps.
img {
	float: left;
	margin: 15px;
}

to stop the float - make only certain areas float with image use:
.clear {
	clear: both; /* clears both left & right floats */
}

if there is no element to apply clear to we need to self-clear.
Option 1: Overflow
<div class="parent">
	<div class="floated">...</div>
	<div class="floated">...</dive>
</div>

.floated {
	float: left;
}
.parent {
	overflow: hidden; /* clips the extra content outside the container */
	/*or*/
	overflow: auto; /* adds a scroll bar if the content is overflowing */
	/*or*/
	overflow: scroll; /* adds a scroll bar even if content is not overflowing */
}


Option 2: "clearfix" Hack
<div class="clearfix">
	<p>floated element</p>
	<p>floated element</p>
</div>

.clearfix:after {
	content: "";
	display: table;
	clear: both;
}


Option 3*: display - Not currently supported in all browsers.
<div class="parent">
	<div>floated element</div>
	<div>floated element</div>
</div>

.parent {
	display: flow-root;
}

caniuse.com - shows broser support for css options

box-sizing: content box 
This means padding & margin will be outside the specified size.
400x600 (content, padding & border is ontop of that)

box-sizing: border-box
This means padding & margin will be inside the specified size.
400x600 (content + padding + border)

/*border box fix */
html {
	box-sizing: boder-box;
}
*, *:before, *:after {
	box-sizing: inherit;
}

Position - Used in combination of top, right, bottom & left properties:
Static - Not positioned.
Relative - Relative to current position.
Absolute - Relative to containing element.
Fixed: Relative to the viewport.
Sticky: Relative to containing element & viewport.

.box {
	position: relative;
	top: 10px;
	right: 10px;
}
	
viewport & z-index 
Elements stacked on top of one another are stacked on the z-axis
Y = height
X = width
Z = Depth

Flexbox - items are aligned along a single axis - rows or columns
Grid - items can be aligned over 2 axis - rows and columns

/* parent element */
.flex-container {
	background: lightgray;
	margin-bottom: 10px;
	width: 500px;
	height: 200px;
	display: flex;
	flex-wrap: wrap;
	flex-direction: column;
}
/* child element */
.flex-item {
	box-sizing: border-box;
	border: 1px solid blue;
	padding: 10px;
	width: 100px;
}

<section class="flex-container">
	<div>flex item
		<div>not a flex item</div>
	</div>
	<div>flex item</div>
	<div>flex item</div>
	<div>flex item</div>
</section>

.container {
	display: flex; /* container takes up size of its parent container full width, height adjust auto to highest height of items */
	/* or */
	display: inline-flex; /* container takes up size of its content & can be side to another inline-flex */
}

flex-direction determines the direction of the main axis. row (default), row-reverse, column and column reverse.

flex-basis sets the initial size of the flex-items
flex-grow how items will expand if extra space in container - 0 = dont grow, 1 = grow equal amounts
flex-shrink how items will shrink if the isn't enough space in container - 1 = items will shrink, 0 = items will overflow unless wrapped

/* shorthand is recommended */
flex: grow shrink basis;
flex: 0 1 100px;

flex-item-top {
	flex: 0 0 100%;
}
flex-item {
	flex: 1 1 auto;
}

Aligning items in a flex container
justify-conten aligns items on the main axis.
align-items aligns items on the cross axis.
.box {
	display: flex;
	align-items: center;
	justify-content: center;
}

CSS grid
Gutter is often used to space columns.

grid container - parent element.
grid items - child elements within the grid container.
<div class="grid-container">
	<div class="grid-item">
		<div>Not a grid item</div>
	</div>
	<div class="grid-item"></div>
	<div class="grid-item"></div>
</div>

.grid-container {
	display: grid; /*span width of container */
	/* or */
	display: inline-grid; /*span width of content */
}

explicit grid:
grid-template-columns
grid-template-rows

.grid-container {
	display: grid;
	grid-template-columns: 100px 100px 100px; /*3 columns */
	grid-template-rows: 100px 100px; /*2 rows */
}

Fraction unit - fr - represents a fraction of the available space in the grid container
grid-template-columns: 1fr 1fr 1fr; /* 3 columns all taking up equal space */
grid-template-columns: 1fr 2fr 1 fr; /* 3 columns, 2nd column taking up double space of the others */
Same applies to rows.

Can use repeat () for shorthand
repeat([number of tracks], [size of tracks])
grid-template-columns: 1fr 1fr 1fr;
/*same as */
grid-template-columns: repeat(3, 1fr);
can mix aswell.
grid-template-columns: 50px repeat(2, 1fr);

Adding gutters with gap
gap: 10px; /* rows & columns */
gap: 10px 20px; /*rows   columns */

/*longhand */
row-gap: 10px;
column-gap: 20px;

/*valid */
gap: 20px;
gap: 16%;
gap: calc(10% + 20px)

/*not valid */
gap: 1fr

Implicit grid - extra content on top of expected grid layout/set in explicit grid - or if number of items unknown
grid-auto-columns
grid-auto-rows
.grid-container {
	display: grid;
	grid-auto-columns: repeat(3, 1fr); /*3 columns */
	grid-auto-rows: 100px 100px; /*2 rows */
}

grid structure
.grid-container {
	display: grid;
	grid-remplate-columns: 100px repeat(2, 1fr);
	grid-template-rows:100px;
	grid-auto-rows: 200px;
	grid-auto-columns: 50px;
}

grid-column = 	grid-column-start
		grid-column-end
grid-row = 	grid-row-start
		grid-row-end

.grid-item-1 {
	/*longhand */
	grid-column-start: 2;
	grid-column-end: 4;
	/*shorthand */
	grid-column: 2 / 4;

	/*longhand */
	grid-row-start: 1;
	grid-row-end: 3;
	/*shorthand */
	grid-row: 1 / 3;
}

Advanced selectors
chold combinator (>)
Only matches to direct child element
/* descendant selector */
parent child {}
ancestor descendant {}

/*child combinator */
parent > child {}

Sibling combinators (adjacent +,general ~)
<parent>
	<sibling></sibling>
	<sibling></sibling>
</parent>

/*first p directly after h1 */
h1 + p {

}

/*any p after h1 */
h1 ~ p {

}

psuedo-class selector: firsty and last
/*only if is last/first elements, nothing before or after. */
p:first-child {
	color: red;
}
p:last-child {
	color: green;
}

<section>
	<p>Paragraph.</p><!-- This 1 will display red -->
	<p>Paragraph.</p>
	<p>Paragraph.</p><!-- This 1 will display green -->
</section>

.example p:last-child {
	color: green;
}

p:first-of-type {
	color: green;
}

Responsive Web Design (RWD)
1 - Fluid layout
2 - Flexible images
3 - Media queries

background-size may only be included after position, seperated with /
selector {
	/* image, repeat style, position, background size */
	background: url(.../image.jpg) no repeat center/cover;
}
/* if not using position, declare size seperately. */
selector {
	background: blue url(image.jpg) no repeat;
	background-size: cover;
}

media queries
@media screen and (max-width: 1000px) {
	h1 {
		font-size: 16px;
	}
}

Media types:
All - matches to all devices. - @media all {...}
Print - matches to printers and print-related displays. - @media print {...}
Speech - matches to screen reading devices that "read out" a page. - @media speech {...}
Screen - matches all devices that arent categorised as print or speech. - @media screen {...}

Media features - used to test a specific feature of the device.
@media (width: 480px) {...}
@media (orientation: landscape) {...}

use and to combine features and types:
@media screen and (orientation: landscape) {...}
@media screen and (min-width: 30em) and (orientation: landscape) {...}









